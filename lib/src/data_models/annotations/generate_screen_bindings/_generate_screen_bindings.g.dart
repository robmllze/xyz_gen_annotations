//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_question_mark
// ignore_for_file: unnecessary_this

part of 'generate_screen_bindings.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class GenerateScreenBindings extends _GenerateScreenBindings {
  //
  //
  //

  static const CLASS_NAME = 'GenerateScreenBindings';

  @override
  String get $className => CLASS_NAME;

  final bool? isAccessibleOnlyIfLoggedInAndVerified;
  final bool? isAccessibleOnlyIfLoggedIn;
  final bool? isAccessibleOnlyIfLoggedOut;
  final bool? isRedirectable;
  final String? path;
  final Set<dynamic>? internalParameters;
  final Set<dynamic>? queryParameters;
  final String? defaultTitle;
  final String? makeup;
  final String? className;
  final String? screenKey;

  //
  //
  //

  const GenerateScreenBindings({
    this.isAccessibleOnlyIfLoggedInAndVerified,
    this.isAccessibleOnlyIfLoggedIn,
    this.isAccessibleOnlyIfLoggedOut,
    this.isRedirectable,
    this.path,
    this.internalParameters,
    this.queryParameters,
    this.defaultTitle,
    this.makeup,
    this.className,
    this.screenKey,
  });

  const GenerateScreenBindings.c2({
    this.isAccessibleOnlyIfLoggedInAndVerified,
    this.isAccessibleOnlyIfLoggedIn,
    this.isAccessibleOnlyIfLoggedOut,
    this.isRedirectable,
    this.path,
    this.internalParameters,
    this.queryParameters,
    this.defaultTitle,
    this.makeup,
    this.className,
    this.screenKey,
  });

  factory GenerateScreenBindings.c3({
    bool? isAccessibleOnlyIfLoggedInAndVerified,
    bool? isAccessibleOnlyIfLoggedIn,
    bool? isAccessibleOnlyIfLoggedOut,
    bool? isRedirectable,
    String? path,
    Set<dynamic>? internalParameters,
    Set<dynamic>? queryParameters,
    String? defaultTitle,
    String? makeup,
    String? className,
    String? screenKey,
  }) {
    return GenerateScreenBindings(
      isAccessibleOnlyIfLoggedInAndVerified:
          isAccessibleOnlyIfLoggedInAndVerified,
      isAccessibleOnlyIfLoggedIn: isAccessibleOnlyIfLoggedIn,
      isAccessibleOnlyIfLoggedOut: isAccessibleOnlyIfLoggedOut,
      isRedirectable: isRedirectable,
      path: path,
      internalParameters: internalParameters,
      queryParameters: queryParameters,
      defaultTitle: defaultTitle,
      makeup: makeup,
      className: className,
      screenKey: screenKey,
    );
  }

  factory GenerateScreenBindings.from(
    BaseModel? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'GenerateScreenBindings.from: $e');
      rethrow;
    }
  }

  static GenerateScreenBindings? fromOrNull(
    BaseModel? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  factory GenerateScreenBindings.of(
    GenerateScreenBindings other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'GenerateScreenBindings.of: $e');
      rethrow;
    }
  }

  static GenerateScreenBindings? ofOrNull(
    GenerateScreenBindings? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  factory GenerateScreenBindings.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'GenerateScreenBindings.fromJsonString: $e');
      rethrow;
    }
  }

  static GenerateScreenBindings? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = jsonDecode(source);
        return GenerateScreenBindings.fromJson(decoded);
      } else {
        return const GenerateScreenBindings.c2();
      }
    } catch (_) {
      return null;
    }
  }

  factory GenerateScreenBindings.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'GenerateScreenBindings.fromJson: $e');
      rethrow;
    }
  }

  static GenerateScreenBindings? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      final isAccessibleOnlyIfLoggedInAndVerified0 =
          otherData?['isAccessibleOnlyIfLoggedInAndVerified'];
      final isAccessibleOnlyIfLoggedInAndVerified =
          letBool(isAccessibleOnlyIfLoggedInAndVerified0);
      final isAccessibleOnlyIfLoggedIn0 =
          otherData?['isAccessibleOnlyIfLoggedIn'];
      final isAccessibleOnlyIfLoggedIn = letBool(isAccessibleOnlyIfLoggedIn0);
      final isAccessibleOnlyIfLoggedOut0 =
          otherData?['isAccessibleOnlyIfLoggedOut'];
      final isAccessibleOnlyIfLoggedOut = letBool(isAccessibleOnlyIfLoggedOut0);
      final isRedirectable0 = otherData?['isRedirectable'];
      final isRedirectable = letBool(isRedirectable0);
      final path0 = otherData?['path'];
      final path = path0?.toString().trim().nullIfEmpty;
      final internalParameters0 = otherData?['internalParameters'];
      final internalParameters = letSet(internalParameters0)
          ?.map(
            (p0) => p0,
          )
          .nonNulls
          .nullIfEmpty
          ?.toSet();
      final queryParameters0 = otherData?['queryParameters'];
      final queryParameters = letSet(queryParameters0)
          ?.map(
            (p0) => p0,
          )
          .nonNulls
          .nullIfEmpty
          ?.toSet();
      final defaultTitle0 = otherData?['defaultTitle'];
      final defaultTitle = defaultTitle0?.toString().trim().nullIfEmpty;
      final makeup0 = otherData?['makeup'];
      final makeup = makeup0?.toString().trim().nullIfEmpty;
      final className0 = otherData?['className'];
      final className = className0?.toString().trim().nullIfEmpty;
      final screenKey0 = otherData?['screenKey'];
      final screenKey = screenKey0?.toString().trim().nullIfEmpty;
      return GenerateScreenBindings(
        isAccessibleOnlyIfLoggedInAndVerified:
            isAccessibleOnlyIfLoggedInAndVerified,
        isAccessibleOnlyIfLoggedIn: isAccessibleOnlyIfLoggedIn,
        isAccessibleOnlyIfLoggedOut: isAccessibleOnlyIfLoggedOut,
        isRedirectable: isRedirectable,
        path: path,
        internalParameters: internalParameters,
        queryParameters: queryParameters,
        defaultTitle: defaultTitle,
        makeup: makeup,
        className: className,
        screenKey: screenKey,
      );
    } catch (e) {
      return null;
    }
  }

  factory GenerateScreenBindings.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'GenerateScreenBindings.fromUri: $e');
      rethrow;
    }
  }

  static GenerateScreenBindings? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS_NAME) {
        return GenerateScreenBindings.fromJson(uri.queryParameters);
      } else {
        return const GenerateScreenBindings.c2();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final isAccessibleOnlyIfLoggedInAndVerified0 =
          this.isAccessibleOnlyIfLoggedInAndVerified;
      final isAccessibleOnlyIfLoggedIn0 = this.isAccessibleOnlyIfLoggedIn;
      final isAccessibleOnlyIfLoggedOut0 = this.isAccessibleOnlyIfLoggedOut;
      final isRedirectable0 = this.isRedirectable;
      final path0 = this.path?.trim().nullIfEmpty;
      final internalParameters0 = this
          .internalParameters
          ?.map(
            (p0) => p0,
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final queryParameters0 = this
          .queryParameters
          ?.map(
            (p0) => p0,
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final defaultTitle0 = this.defaultTitle?.trim().nullIfEmpty;
      final makeup0 = this.makeup?.trim().nullIfEmpty;
      final className0 = this.className?.trim().nullIfEmpty;
      final screenKey0 = this.screenKey?.trim().nullIfEmpty;
      final withNulls = mergeMapsDeep([
        {
          'isAccessibleOnlyIfLoggedInAndVerified':
              isAccessibleOnlyIfLoggedInAndVerified0,
        },
        {
          'isAccessibleOnlyIfLoggedIn': isAccessibleOnlyIfLoggedIn0,
        },
        {
          'isAccessibleOnlyIfLoggedOut': isAccessibleOnlyIfLoggedOut0,
        },
        {
          'isRedirectable': isRedirectable0,
        },
        {
          'path': path0,
        },
        {
          'internalParameters': internalParameters0,
        },
        {
          'queryParameters': queryParameters0,
        },
        {
          'defaultTitle': defaultTitle0,
        },
        {
          'makeup': makeup0,
        },
        {
          'className': className0,
        },
        {
          'screenKey': screenKey0,
        },
      ]).mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'GenerateScreenBindings.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  GenerateScreenBindings copyWith(BaseModel? other) {
    final a = this.toJson();
    final b = other?.toJson();
    final c = {...a, ...?b};
    return GenerateScreenBindings.fromJson(c);
  }

  //
  //
  //

  // isAccessibleOnlyIfLoggedInAndVerified.
  bool? get isAccessibleOnlyIfLoggedInAndVerifiedField =>
      this.isAccessibleOnlyIfLoggedInAndVerified;

  // isAccessibleOnlyIfLoggedIn.
  bool? get isAccessibleOnlyIfLoggedInField => this.isAccessibleOnlyIfLoggedIn;

  // isAccessibleOnlyIfLoggedOut.
  bool? get isAccessibleOnlyIfLoggedOutField =>
      this.isAccessibleOnlyIfLoggedOut;

  // isRedirectable.
  bool? get isRedirectableField => this.isRedirectable;

  // path.
  String? get pathField => this.path;

  // internalParameters.
  Set<dynamic>? get internalParametersField => this.internalParameters;

  // queryParameters.
  Set<dynamic>? get queryParametersField => this.queryParameters;

  // defaultTitle.
  String? get defaultTitleField => this.defaultTitle;

  // makeup.
  String? get makeupField => this.makeup;

  // className.
  String? get classNameField => this.className;

  // screenKey.
  String? get screenKeyField => this.screenKey;
}

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

final class GenerateScreenBindingsFieldNames {
  //
  //
  //

  static const isAccessibleOnlyIfLoggedInAndVerified =
      'isAccessibleOnlyIfLoggedInAndVerified';
  static const isAccessibleOnlyIfLoggedIn = 'isAccessibleOnlyIfLoggedIn';
  static const isAccessibleOnlyIfLoggedOut = 'isAccessibleOnlyIfLoggedOut';
  static const isRedirectable = 'isRedirectable';
  static const path = 'path';
  static const internalParameters = 'internalParameters';
  static const queryParameters = 'queryParameters';
  static const defaultTitle = 'defaultTitle';
  static const makeup = 'makeup';
  static const className = 'className';
  static const screenKey = 'screenKey';

  //
  //
  //

  const GenerateScreenBindingsFieldNames._();
}
