//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'property.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class Property extends _Property {
  //
  //
  //

  static const K_OPTIONS = 'options';

  static const CLASS = 'Property';

  @override
  String get $class => CLASS;

  final Map<String, dynamic>? options;

  //
  //
  //

  const Property({
    this.options,
  });

  //
  //
  //

  factory Property.b({
    Map<String, dynamic>? options,
  }) {
    return Property(
      options: options,
    );
  }

  //
  //
  //

  factory Property.from(
    BaseModel? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'Property.from: $e');
      rethrow;
    }
  }

  static Property? fromOrNull(
    BaseModel? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  //
  //
  //

  factory Property.of(
    Property other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'Property.of: $e');
      rethrow;
    }
  }

  static Property? ofOrNull(
    Property? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  //
  //
  //

  factory Property.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'Property.fromJsonString: $e');
      rethrow;
    }
  }

  static Property? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = jsonDecode(source);
        return Property.fromJson(decoded);
      } else {
        return Property.b();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  factory Property.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'Property.fromJson: $e');
      rethrow;
    }
  }

  static Property? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      final options0 = otherData?[K_OPTIONS];
      final options = letMap(options0)
          ?.map(
            (p0, p1) => MapEntry(
              p0?.toString().trim().nullIfEmpty,
              p1,
            ),
          )
          .nonNulls
          .nullIfEmpty;
      return Property(
        options: options,
      );
    } catch (e) {
      return null;
    }
  }

  //
  //
  //

  factory Property.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'Property.fromUri: $e');
      rethrow;
    }
  }

  static Property? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS) {
        return Property.fromJson(uri.queryParameters);
      } else {
        return Property.b();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final options0 = this
          .options
          ?.map(
            (p0, p1) => MapEntry(
              p0?.trim().nullIfEmpty,
              p1,
            ),
          )
          .nonNulls
          .nullIfEmpty;
      final withNulls = <String, dynamic>{
        K_OPTIONS: options0,
      }.mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'Property.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  Property copyWith(BaseModel? other) {
    final a = this.toJson();
    final b = other?.toJson();
    final c = {...a, ...?b};
    return Property.fromJson(c);
  }

  //
  //
  //

  // options.
  Map<String, dynamic>? get optionsField => this.options;
}

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

enum PropertyFields {
  //
  //
  //

  options(
    const Field(
      fieldName: 'options',
      fieldType: 'Map<String, dynamic>',
      nullable: true,
    ),
  );

  //
  //
  //

  final Field field;

  //
  //
  //

  const PropertyFields(this.field);
}
