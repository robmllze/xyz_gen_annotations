//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'field.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class Field extends _Field {
  //
  //
  //

  static const CLASS_NAME = 'Field';

  @override
  String get $className => CLASS_NAME;

  final String? fieldName;
  final dynamic? fieldType;
  final bool? nullable;

  //
  //
  //

  const Field({
    this.fieldName,
    required this.fieldType,
    this.nullable,
  });

  const Field.c2({
    this.fieldName,
    this.fieldType,
    this.nullable,
  });

  factory Field.c3({
    String? fieldName,
    dynamic? fieldType,
    bool? nullable,
  }) {
    assert(fieldType != null);

    return Field(
      fieldName: fieldName,
      fieldType: fieldType,
      nullable: nullable,
    );
  }

  factory Field.from(
    BaseModel? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'Field.from: $e');
      rethrow;
    }
  }

  static Field? fromOrNull(
    BaseModel? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  factory Field.of(
    Field other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'Field.of: $e');
      rethrow;
    }
  }

  static Field? ofOrNull(
    Field? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  factory Field.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'Field.fromJsonString: $e');
      rethrow;
    }
  }

  static Field? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = jsonDecode(source);
        return Field.fromJson(decoded);
      } else {
        return const Field.c2();
      }
    } catch (_) {
      return null;
    }
  }

  factory Field.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'Field.fromJson: $e');
      rethrow;
    }
  }

  static Field? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      final fieldName0 = otherData?[FieldFields.fieldName.name];
      final fieldName = fieldName0?.toString().trim().nullIfEmpty;
      final fieldType0 = otherData?[FieldFields.fieldType.name];
      final fieldType = fieldType0;
      final nullable0 = otherData?[FieldFields.nullable.name];
      final nullable = letBool(nullable0);
      return Field(
        fieldName: fieldName,
        fieldType: fieldType,
        nullable: nullable,
      );
    } catch (e) {
      return null;
    }
  }

  factory Field.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'Field.fromUri: $e');
      rethrow;
    }
  }

  static Field? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS_NAME) {
        return Field.fromJson(uri.queryParameters);
      } else {
        return const Field.c2();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final fieldName0 = this.fieldName?.trim().nullIfEmpty;
      final fieldType0 = this.fieldType;
      final nullable0 = this.nullable;
      final withNulls = <String, dynamic>{
        FieldFields.fieldName.name: fieldName0,
        FieldFields.fieldType.name: fieldType0,
        FieldFields.nullable.name: nullable0,
      }.mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'Field.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  Field copyWith(BaseModel? other) {
    final a = this.toJson();
    final b = other?.toJson();
    final c = {...a, ...?b};
    return Field.fromJson(c);
  }

  //
  //
  //

  // fieldName.
  String? get fieldNameField => this.fieldName;

  // fieldType.
  dynamic get fieldTypeField => this.fieldType!;

  // nullable.
  bool? get nullableField => this.nullable;
}

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

enum FieldFields {
  //
  //
  //

  fieldName(
    const Field(
      fieldName: 'fieldName',
      fieldType: 'String',
      nullable: true,
    ),
  ),
  fieldType(
    const Field(
      fieldName: 'fieldType',
      fieldType: 'dynamic',
      nullable: false,
    ),
  ),
  nullable(
    const Field(
      fieldName: 'nullable',
      fieldType: 'bool',
      nullable: true,
    ),
  );

  //
  //
  //

  final Field field;

  //
  //
  //

  const FieldFields(this.field);

  //
  //
  //

  String get name => this.field.fieldName!;
}
